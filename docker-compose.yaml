version: "3.8"

services:
  mark-yolo-client:
    image: maqacm/mark-yolo-client:v1.0.0
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: mark-yolo-client
    restart: unless-stopped
    ports:
      - "3000:3000"
    depends_on:
      - mark-yolo-backend
    networks:
      - app-net
    environment:
      - BACKEND_APP_API_URL=http://mark-yolo-backend:4000
      - NODE_ENV=production
    healthcheck:
      test: ["CMD","wget","--spider","--quiet","http://localhost:3000"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  mark-yolo-backend:
    image: maqacm/mark-yolo-backend:v1.0.0
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: mark-yolo-backend
    restart: always
    ports:
      - "4000:5000"
    depends_on:
      - app-ip-mongo
    networks:
      - app-net
    environment:
      - MONGODB_URI=mongodb://app-ip-mongo:27017/yolomy
      - PORT=5000
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { hostname: 'localhost', port: 5000, path: '/api/products', timeout: 2000 }; const req = http.get(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', () => { process.exit(1); }); req.end();"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 15s

  app-ip-mongo:
    image: mongo:latest
    container_name: app-mongo
    restart: always
    ports:
      - "27017:27017"
    networks:
      - app-net
    volumes:
      - app-mongo-data:/data/db
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    command: ["--bind_ip_all"]

networks:
  app-net:
    name: app-net
    driver: bridge
    attachable: true
    ipam:
      config:
        - subnet: 172.20.0.0/16
          ip_range: 172.20.0.0/16

volumes:
  app-mongo-data:
    driver: local

